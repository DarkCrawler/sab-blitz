{
  "pipelineSpec": {
    "components": {
      "comp-getbesthyperparametersop": {
        "executorLabel": "exec-getbesthyperparametersop",
        "inputDefinitions": {
          "parameters": {
            "study_spec_metrics": {
              "type": "STRING"
            },
            "trials": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-gettrialsop": {
        "executorLabel": "exec-gettrialsop",
        "inputDefinitions": {
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-hyperparameter-tuning-job": {
        "executorLabel": "exec-hyperparameter-tuning-job",
        "inputDefinitions": {
          "parameters": {
            "base_output_directory": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "encryption_spec_key_name": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "max_failed_trial_count": {
              "type": "INT"
            },
            "max_trial_count": {
              "type": "INT"
            },
            "network": {
              "type": "STRING"
            },
            "parallel_trial_count": {
              "type": "INT"
            },
            "project": {
              "type": "STRING"
            },
            "service_account": {
              "type": "STRING"
            },
            "study_spec_algorithm": {
              "type": "STRING"
            },
            "study_spec_measurement_selection_type": {
              "type": "STRING"
            },
            "study_spec_metrics": {
              "type": "STRING"
            },
            "study_spec_parameters": {
              "type": "STRING"
            },
            "worker_pool_specs": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-getbesthyperparametersop": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "GetBestHyperparametersOp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef GetBestHyperparametersOp(trials: list, study_spec_metrics: list) -> list:\n  \"\"\"Retrieves the best hyperparameters based on the trials.\n\n  Args:\n      trials (list): Required. List representing the intermediate\n        JSON representation of the trials from the hyperparameter tuning job.\n      study_spec_metrics (list): Required. List serialized from dictionary\n        representing the metrics to optimize.\n        The dictionary key is the metric_id, which is reported by your training\n        job, and the dictionary value is the optimization goal of the metric\n        ('minimize' or 'maximize'). example:\n        metrics = hyperparameter_tuning_job.serialize_metrics(\n            {'loss': 'minimize', 'accuracy': 'maximize'})\n\n  Returns:\n      List representing the intermediate JSON representation of the best\n      hyperparameters from the best trial in the list of trials.\n\n  Raises:\n      RuntimeError: If there are multiple metrics.\n  \"\"\"\n  from google.cloud.aiplatform_v1.types import study\n\n  if len(study_spec_metrics) > 1:\n    raise RuntimeError('Unable to determine best parameters for multi-objective'\n                       ' hyperparameter tuning.')\n  trials_list = [study.Trial.from_json(trial) for trial in trials]\n  best_trial = None\n  goal = study_spec_metrics[0]['goal']\n  best_fn = None\n  if goal == study.StudySpec.MetricSpec.GoalType.MAXIMIZE:\n    best_fn = max\n  elif goal == study.StudySpec.MetricSpec.GoalType.MINIMIZE:\n    best_fn = min\n  best_trial = best_fn(\n      trials_list, key=lambda trial: trial.final_measurement.metrics[0].value)\n\n  return [\n      study.Trial.Parameter.to_json(param) for param in best_trial.parameters\n  ]\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-gettrialsop": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "GetTrialsOp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'google-cloud-pipeline-components' 'protobuf' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef GetTrialsOp(gcp_resources: str) -> list:\n  \"\"\"Retrieves the best trial from the trials.\n\n  Args:\n      gcp_resources (str): Proto tracking the hyperparameter tuning job.\n\n  Returns:\n      List of strings representing the intermediate JSON representation of the\n      trials from the hyperparameter tuning job.\n  \"\"\"\n  from google.cloud import aiplatform\n  from google_cloud_pipeline_components.proto.gcp_resources_pb2 import GcpResources\n  from google.protobuf.json_format import Parse\n  from google.cloud.aiplatform_v1.types import study\n\n  api_endpoint_suffix = '-aiplatform.googleapis.com'\n  gcp_resources_proto = Parse(gcp_resources, GcpResources())\n  gcp_resources_split = gcp_resources_proto.resources[0].resource_uri.partition(\n      'projects')\n  resource_name = gcp_resources_split[1] + gcp_resources_split[2]\n  prefix_str = gcp_resources_split[0]\n  prefix_str = prefix_str[:prefix_str.find(api_endpoint_suffix)]\n  api_endpoint = prefix_str[(prefix_str.rfind('//') + 2):] + api_endpoint_suffix\n\n  client_options = {'api_endpoint': api_endpoint}\n  job_client = aiplatform.gapic.JobServiceClient(client_options=client_options)\n  response = job_client.get_hyperparameter_tuning_job(name=resource_name)\n\n  return [study.Trial.to_json(trial) for trial in response.trials]\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-hyperparameter-tuning-job": {
          "container": {
            "args": [
              "--type",
              "HyperparameterTuningJob",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"study_spec\": {\"metrics\": {{$.inputs.parameters['study_spec_metrics']}}, \"parameters\": {{$.inputs.parameters['study_spec_parameters']}}, \"algorithm\": \"{{$.inputs.parameters['study_spec_algorithm']}}\", \"measurement_selection_type\": \"{{$.inputs.parameters['study_spec_measurement_selection_type']}}\"}, \"max_trial_count\": {{$.inputs.parameters['max_trial_count']}}, \"parallel_trial_count\": {{$.inputs.parameters['parallel_trial_count']}}, \"max_failed_trial_count\": {{$.inputs.parameters['max_failed_trial_count']}}, \"trial_job_spec\": {\"worker_pool_specs\": {{$.inputs.parameters['worker_pool_specs']}}, \"service_account\": \"{{$.inputs.parameters['service_account']}}\", \"network\": \"{{$.inputs.parameters['network']}}\", \"base_output_directory\": {\"output_uri_prefix\": \"{{$.inputs.parameters['base_output_directory']}}\"}}, \"encryption_spec\": {\"kms_key_name\":\"{{$.inputs.parameters['encryption_spec_key_name']}}\"}}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.2"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "exodus-hyperparam-only-kfp-pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "getbesthyperparametersop": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-getbesthyperparametersop"
            },
            "dependentTasks": [
              "gettrialsop"
            ],
            "inputs": {
              "parameters": {
                "study_spec_metrics": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[{\"metric_id\": \"accuracy\", \"goal\": 1}]"
                    }
                  }
                },
                "trials": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "gettrialsop"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "getbesthyperparametersop"
            }
          },
          "gettrialsop": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-gettrialsop"
            },
            "dependentTasks": [
              "hyperparameter-tuning-job"
            ],
            "inputs": {
              "parameters": {
                "gcp_resources": {
                  "taskOutputParameter": {
                    "outputParameterKey": "gcp_resources",
                    "producerTask": "hyperparameter-tuning-job"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "gettrialsop"
            }
          },
          "hyperparameter-tuning-job": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-hyperparameter-tuning-job"
            },
            "inputs": {
              "parameters": {
                "base_output_directory": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "gs://qwiklabs-gcp-00-59947c43422f-kfp-artifact-store/pipeline"
                    }
                  }
                },
                "display_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "exodus-hyperparam-only-kfp-tuning-job"
                    }
                  }
                },
                "encryption_spec_key_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "location": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "us-central1"
                    }
                  }
                },
                "max_failed_trial_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "0"
                    }
                  }
                },
                "max_trial_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "5"
                    }
                  }
                },
                "network": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "parallel_trial_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "5"
                    }
                  }
                },
                "project": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "qwiklabs-gcp-00-59947c43422f"
                    }
                  }
                },
                "service_account": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "study_spec_algorithm": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "ALGORITHM_UNSPECIFIED"
                    }
                  }
                },
                "study_spec_measurement_selection_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "BEST_MEASUREMENT"
                    }
                  }
                },
                "study_spec_metrics": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[{\"metric_id\": \"accuracy\", \"goal\": 1}]"
                    }
                  }
                },
                "study_spec_parameters": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[{\"parameter_id\": \"alpha\", \"double_value_spec\": {\"min_value\": 0.0001, \"max_value\": 0.1}, \"scale_type\": 1, \"conditional_parameter_specs\": []}, {\"parameter_id\": \"max_iter\", \"discrete_value_spec\": {\"values\": [1.0, 2.0]}, \"scale_type\": 1, \"conditional_parameter_specs\": []}]"
                    }
                  }
                },
                "worker_pool_specs": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[{\"machine_spec\": {\"machine_type\": \"n1-standard-4\", \"accelerator_type\": \"NVIDIA_TESLA_T4\", \"accelerator_count\": 1}, \"replica_count\": 1, \"container_spec\": {\"image_uri\": \"gcr.io/qwiklabs-gcp-00-59947c43422f/exodus_kf_bq_trainer:latest\", \"args\": [\"--hptune\"]}}]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "hyperparameter-tuning-job"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.9"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://qwiklabs-gcp-00-59947c43422f-kfp-artifact-store/pipeline"
  }
}